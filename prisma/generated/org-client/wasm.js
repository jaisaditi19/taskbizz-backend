
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  mobile: 'mobile',
  email: 'email',
  gstNumber: 'gstNumber',
  panNumber: 'panNumber',
  address: 'address',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  clientCommunication: 'clientCommunication',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  head: 'head',
  taskId: 'taskId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  clientId: 'clientId',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  dueDate: 'dueDate',
  assignedToId: 'assignedToId',
  priority: 'priority',
  remarks: 'remarks',
  status: 'status',
  recurrenceRule: 'recurrenceRule',
  recurrenceEndDate: 'recurrenceEndDate',
  isRecurring: 'isRecurring',
  lastGeneratedUntil: 'lastGeneratedUntil',
  retainSubtasks: 'retainSubtasks',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientMailSendCount: 'clientMailSendCount'
};

exports.Prisma.TaskCustomFieldScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  type: 'type',
  options: 'options',
  createdAt: 'createdAt'
};

exports.Prisma.TaskCustomValueScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  fieldId: 'fieldId',
  value: 'value'
};

exports.Prisma.TaskOccurrenceScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  dueDate: 'dueDate',
  assignedToId: 'assignedToId',
  priority: 'priority',
  remarks: 'remarks',
  status: 'status',
  occurrenceIndex: 'occurrenceIndex',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  completedBy: 'completedBy',
  completionNote: 'completionNote',
  clientId: 'clientId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sequentialId: 'sequentialId',
  clientMailSendCount: 'clientMailSendCount',
  startEmailSent: 'startEmailSent',
  startEmailSentAt: 'startEmailSentAt'
};

exports.Prisma.TaskAssigneeScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId'
};

exports.Prisma.TaskOccurrenceAssigneeScalarFieldEnum = {
  id: 'id',
  occurrenceId: 'occurrenceId',
  userId: 'userId'
};

exports.Prisma.TaskAttachmentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  key: 'key',
  createdAt: 'createdAt'
};

exports.Prisma.TaskOccurrenceAttachmentScalarFieldEnum = {
  id: 'id',
  occurrenceId: 'occurrenceId',
  key: 'key',
  createdAt: 'createdAt'
};

exports.Prisma.CompletionLogScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  occurrenceAt: 'occurrenceAt',
  type: 'type',
  completedBy: 'completedBy',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.ReminderScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  occurrenceAt: 'occurrenceAt',
  remindAt: 'remindAt',
  channel: 'channel',
  payload: 'payload',
  sent: 'sent',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.CalendarEntryScalarFieldEnum = {
  id: 'id',
  createdById: 'createdById',
  type: 'type',
  title: 'title',
  description: 'description',
  start: 'start',
  end: 'end',
  allDay: 'allDay',
  freq: 'freq',
  interval: 'interval',
  until: 'until',
  count: 'count',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  recipientId: 'recipientId',
  actorId: 'actorId',
  taskId: 'taskId',
  occurrenceId: 'occurrenceId',
  type: 'type',
  title: 'title',
  body: 'body',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  isGroup: 'isGroup',
  title: 'title',
  createdById: 'createdById',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationMemberScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  body: 'body',
  attachments: 'attachments',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReadScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.DirectoryUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  avatarUrl: 'avatarUrl',
  lastActiveAt: 'lastActiveAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  occurrenceId: 'occurrenceId',
  taskId: 'taskId',
  recipient: 'recipient',
  subject: 'subject',
  body: 'body',
  provider: 'provider',
  providerMessageId: 'providerMessageId',
  status: 'status',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  requesterId: 'requesterId',
  requesterName: 'requesterName',
  requesterEmail: 'requesterEmail',
  type: 'type',
  reason: 'reason',
  startDate: 'startDate',
  endDate: 'endDate',
  days: 'days',
  status: 'status',
  approverId: 'approverId',
  adminComment: 'adminComment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LicenseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  licenseNumber: 'licenseNumber',
  type: 'type',
  holder: 'holder',
  clientId: 'clientId',
  projectId: 'projectId',
  serviceId: 'serviceId',
  url: 'url',
  vendorId: 'vendorId',
  issuedOn: 'issuedOn',
  validFrom: 'validFrom',
  expiresOn: 'expiresOn',
  remindOffsets: 'remindOffsets',
  gracePeriodDays: 'gracePeriodDays',
  muted: 'muted',
  responsibleId: 'responsibleId',
  status: 'status',
  nextReminderAt: 'nextReminderAt',
  lastReminderAt: 'lastReminderAt',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LicenseAssigneeScalarFieldEnum = {
  licenseId: 'licenseId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.LicenseHistoryScalarFieldEnum = {
  id: 'id',
  licenseId: 'licenseId',
  action: 'action',
  payload: 'payload',
  actorId: 'actorId',
  at: 'at'
};

exports.Prisma.LicenseAttachmentScalarFieldEnum = {
  id: 'id',
  licenseId: 'licenseId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  spacesKey: 'spacesKey',
  cachedUrl: 'cachedUrl',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ScheduledReminderScalarFieldEnum = {
  id: 'id',
  licenseId: 'licenseId',
  orgLocalDay: 'orgLocalDay',
  runAt: 'runAt',
  offsetDays: 'offsetDays',
  status: 'status',
  attempts: 'attempts',
  lastError: 'lastError',
  sentAt: 'sentAt',
  meta: 'meta'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ClientStatus = exports.$Enums.ClientStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_TRACK: 'ON_TRACK',
  DELAYED: 'DELAYED',
  IN_TESTING: 'IN_TESTING',
  ON_HOLD: 'ON_HOLD',
  APPROVED: 'APPROVED',
  CANCELLED: 'CANCELLED',
  PLANNING: 'PLANNING',
  COMPLETED: 'COMPLETED'
};

exports.LogType = exports.$Enums.LogType = {
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED',
  RESCHEDULED: 'RESCHEDULED'
};

exports.CalendarEntryType = exports.$Enums.CalendarEntryType = {
  REMINDER: 'REMINDER',
  APPOINTMENT: 'APPOINTMENT'
};

exports.RecurrenceFreq = exports.$Enums.RecurrenceFreq = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.EmailStatus = exports.$Enums.EmailStatus = {
  SENT: 'SENT',
  FAILED: 'FAILED',
  PENDING: 'PENDING'
};

exports.LeaveType = exports.$Enums.LeaveType = {
  SICK: 'SICK',
  CASUAL: 'CASUAL',
  PLANNED: 'PLANNED',
  UNPAID: 'UNPAID'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.LicenseStatus = exports.$Enums.LicenseStatus = {
  ACTIVE: 'ACTIVE',
  RENEWAL_DUE: 'RENEWAL_DUE',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.LicenseAssigneeRole = exports.$Enums.LicenseAssigneeRole = {
  OWNER: 'OWNER',
  WATCHER: 'WATCHER'
};

exports.ReminderStatus = exports.$Enums.ReminderStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  Client: 'Client',
  Project: 'Project',
  Task: 'Task',
  TaskCustomField: 'TaskCustomField',
  TaskCustomValue: 'TaskCustomValue',
  TaskOccurrence: 'TaskOccurrence',
  TaskAssignee: 'TaskAssignee',
  TaskOccurrenceAssignee: 'TaskOccurrenceAssignee',
  TaskAttachment: 'TaskAttachment',
  TaskOccurrenceAttachment: 'TaskOccurrenceAttachment',
  CompletionLog: 'CompletionLog',
  Reminder: 'Reminder',
  CalendarEntry: 'CalendarEntry',
  Notification: 'Notification',
  Conversation: 'Conversation',
  ConversationMember: 'ConversationMember',
  Message: 'Message',
  MessageRead: 'MessageRead',
  DirectoryUser: 'DirectoryUser',
  EmailLog: 'EmailLog',
  LeaveRequest: 'LeaveRequest',
  License: 'License',
  LicenseAssignee: 'LicenseAssignee',
  LicenseHistory: 'LicenseHistory',
  LicenseAttachment: 'LicenseAttachment',
  ScheduledReminder: 'ScheduledReminder'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
